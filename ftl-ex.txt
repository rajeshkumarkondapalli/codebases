## Freemarker Tutorial: Mastering Dynamic Web Templates

Freemarker is a powerful, Java-based template engine primarily used for generating dynamic web pages and emails. Unlike other engines that embed Java code directly into HTML, Freemarker utilizes a clear separation of concerns by using its own templating language. This approach enhances code readability, maintainability, and security.

This tutorial will guide you through the fundamentals of Freemarker, equipping you to build dynamic and data-driven web applications.

**1. Setting Up Freemarker:**

* **Dependency:** Add the Freemarker dependency to your Java project (Maven example):

```xml
<dependency>
    <groupId>org.freemarker</groupId>
    <artifactId>freemarker</artifactId>
    <version>2.3.31</version>
</dependency>
```

* **Initialization:** Create a `Configuration` object to configure Freemarker:

```java
import freemarker.template.Configuration;
import freemarker.template.TemplateExceptionHandler;

Configuration cfg = new Configuration(Configuration.VERSION_2_3_31);
cfg.setDirectoryForTemplateLoading(new File("/path/to/templates"));
cfg.setDefaultEncoding("UTF-8");
cfg.setTemplateExceptionHandler(TemplateExceptionHandler.RETHROW_HANDLER);
cfg.setLogTemplateExceptions(false);
cfg.setWrapUncheckedExceptions(true);
```

**2. Creating a Template:**

Freemarker templates are simple text files with the `.ftl` extension. They contain a mix of static HTML and Freemarker directives (special instructions) for dynamic content.

**Example Template (product.ftl):**

```html
<!DOCTYPE html>
<html>
<head>
    <title>Product Details</title>
</head>
<body>
    <h1>${product.name}</h1>
    <p>Price: ${product.price}</p>
    <p>Description: ${product.description}</p>
</body>
</html>
```

**3. Processing Data and Generating Output:**

* **Load Template:** Load the template file using the `Configuration` object.

```java
Template template = cfg.getTemplate("product.ftl");
```

* **Create Data Model:** Prepare the data you want to insert into the template (e.g., a `Product` object).

```java
Product product = new Product("Laptop", 999.99, "Powerful and portable laptop");
```

* **Combine Template and Data:** Create a `Writer` to write the output and process the template with the data model.

```java
Writer out = new StringWriter();
Map<String, Object> root = new HashMap<>();
root.put("product", product);
template.process(root, out);
String htmlOutput = out.toString();
```

**4. Key Freemarker Directives:**

* **Interpolation:** `${expression}` - Inserts the value of an expression.
* **Conditional Logic:** `<#if condition>...</#if>`, `<#elseif condition>...</#elseif>`, `<#else>...</#else>`
* **Looping:** `<#list sequence as item>...</#list>`
* **Macros:** Define reusable template fragments.
* **Include:** Include other templates within the current one.

**Example with Looping (products.ftl):**

```html
<!DOCTYPE html>
<html>
<head>
    <title>Product List</title>
</head>
<body>
    <h1>Our Products</h1>
    <ul>
    <#list products as product>
        <li>
            <a href="/product/${product.id}">${product.name}</a> - $${product.price}
        </li>
    </#list>
    </ul>
</body>
</html>
```

**5. Advanced Features:**

* **Built-in Functions:** Freemarker provides numerous built-in functions for string manipulation, date formatting, arithmetic operations, and more.
* **Custom Directives:** Extend Freemarker's functionality by creating your own directives.
* **Namespaces:** Organize templates and prevent naming conflicts.

**Conclusion:**

This tutorial provided a foundational understanding of Freemarker. By mastering its templating language and powerful features, you can create dynamic web applications with clean code and efficient data handling. Explore the official Freemarker documentation for in-depth knowledge and advanced usage scenarios.
