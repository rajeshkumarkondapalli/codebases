
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class StringChecker {
    public static void main(String[] args) {
        ExecutorService executor = Executors.newSingleThreadExecutor();

        Callable<String> task = () -> {
            String result;
            while (true) {
                result = checkString();
                if (result != null && !result.isEmpty()) {
                    System.out.println("Valid string found: " + result);
                    return result;  // Return the valid string
                }
                System.out.println("Waiting for a valid string...");
                try {
                    Thread.sleep(1000);  // Wait 1 second before retrying
                } catch (InterruptedException e) {
                    System.out.println("Thread interrupted. Stopping...");
                    break;
                }
            }
            return null;  // Return null if interrupted or if loop ends unexpectedly
        };

        Future<String> future = executor.submit(task);

        try {
            String finalResult = future.get();  // Block main thread until the task completes
            System.out.println("Main thread resumes. Final Result: " + finalResult);
        } catch (Exception e) {
            System.out.println("Error occurred: " + e.getMessage());
        }

        executor.shutdown();
    }

    private static String checkString() {
        if (Math.random() > 0.8) {
            return "Hello, World!";
        }
        return "";  // Return empty if not valid
    }
}




import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class StringChecker {
    public static void main(String[] args) {
        ExecutorService executor = Executors.newSingleThreadExecutor();
        final String[] result = {null}; // Using an array to modify inside lambda

        Future<?> future = executor.submit(() -> {
            while (true) {
                result[0] = checkString();
                if (result[0] != null && !result[0].isEmpty()) {
                    System.out.println("Valid string found: " + result[0]);
                    break; // Exit loop when a valid string is found
                }
                System.out.println("Waiting for a valid string...");
                try {
                    Thread.sleep(1000); // Wait 1 second before retrying
                } catch (InterruptedException e) {
                    System.out.println("Thread interrupted. Stopping...");
                    break;
                }
            }
        });

        try {
            future.get(); // Block main thread until task completes
        } catch (Exception e) {
            System.out.println("Error occurred: " + e.getMessage());
        }

        executor.shutdown(); // Shut down the executor
        System.out.println("Main thread resumes. Final Result: " + result[0]);
    }

    private static String checkString() {
        if (Math.random() > 0.8) {
            return "Hello, World!";
        }
        return ""; // Or return null
    }
}





import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class StringChecker {
    private static String result;

    public static void main(String[] args) {
        ExecutorService executor = Executors.newSingleThreadExecutor();

        Future<?> future = executor.submit(() -> {
            while (true) {
                result = checkString();
                if (result != null && !result.isEmpty()) {
                    System.out.println("Valid string found: " + result);
                    break; // Exit loop when a valid string is found
                }
                System.out.println("Waiting for a valid string...");
                try {
                    Thread.sleep(1000); // Wait 1 second before retrying
                } catch (InterruptedException e) {
                    System.out.println("Thread interrupted. Stopping...");
                    break;
                }
            }
        });

        try {
            future.get(); // Block main thread until task completes
        } catch (Exception e) {
            System.out.println("Error occurred: " + e.getMessage());
        }

        executor.shutdown(); // Shut down the executor
        System.out.println("Main thread resumes. Final Result: " + result);
    }

    // Simulated method that sometimes returns null or empty string
    private static String checkString() {
        if (Math.random() > 0.8) {
            return "Hello, World!";
        }
        return ""; // Or return null
    }
}